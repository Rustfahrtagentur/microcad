-- Test --
  custom_op
  ../books/tutorials/src/lego_brick/part/custom_op.md:32

-- Code --

 1: use std::geo2d::*;
 2: use std::ops::*;
 3: 
 4: const SPACING = 8mm;
 5: 
 6: op grid(rows: Integer, columns: Integer) {
 7:     @children
 8:         .translate(x = [0..rows] * SPACING, y = [0..columns] * SPACING)
 9:         .align()
10: }
11: 
12: sketch Base(
13:     rows: Integer,
14:     columns: Integer,
15:     width: Length,
16:     height: Length
17: ) {
18:     thickness = 1.2mm;
19:     frame = Frame(width, height, thickness);
20:     struts = Ring(outer = 6.51mm, inner = 4.8mm)
21:         .grid(rows, columns);
22:     frame | struts;
23: }
24: 
25: sketch Knobs(rows: Integer, columns: Integer) {
26:     Circle(d = 4.8mm)
27:         .grid(rows, columns);
28: }
29: 
30: rows = 2;
31: columns = 4;
32: width = columns * SPACING - 0.2mm;
33: height = rows * SPACING - 0.2mm;
34: cap_thickness = 1.0mm;
35: 
36: Base(rows, columns, width, height);
37: Knobs(rows, columns);

-- Output --
-- Errors --
-- Model --
  Group -> 2D (root)
    sketch <NO ID>::Base(columns: Integer = 4, height: Length = 15.8mm, rows: Integer = 2, width: Length = 31.8mm) -> 2D
      Operation union()⏎ -> 2D
        Group -> 2D
          sketch std::geo2d::Frame(height: Length = 15.8mm, thickness: Length = 1.2mm, width: Length = 31.8mm) -> 2D
            Operation subtract()⏎ -> 2D
              Group -> 2D
                sketch std::geo2d::Rect(height: Length = 15.8mm, width: Length = 31.8mm) -> 2D
                  Primitive2D __builtin::geo2d::Rect(height: Scalar = 15.8, width: Scalar = 31.8, x: Scalar = -15.9, y: Scalar = -7.9)⏎ -> 2D
                sketch std::geo2d::Rect(height: Length = 13.4mm, width: Length = 29.4mm) -> 2D
                  Primitive2D __builtin::geo2d::Rect(height: Scalar = 13.4, width: Scalar = 29.4, x: Scalar = -14.7, y: Scalar = -6.7)⏎ -> 2D
          op <NO ID>::grid(columns: Integer = 4, rows: Integer = 2) -> 2D
            Operation __builtin::ops::align()⏎ -> 2D
              op std::ops::translate(x: Length = 0mm, y: Length = 0mm, z: Length = 0mm) -> 2D
                Transform __builtin::ops::translate(x: Scalar = 0, y: Scalar = 0, z: Scalar = 0)⏎ -> 2D
                  op std::ops::translate(x: Length = 8mm, y: Length = 0mm, z: Length = 0mm) -> 2D
                    Transform __builtin::ops::translate(x: Scalar = 8, y: Scalar = 0, z: Scalar = 0)⏎ -> 2D
                      op std::ops::translate(x: Length = 16mm, y: Length = 0mm, z: Length = 0mm) -> 2D
                        Transform __builtin::ops::translate(x: Scalar = 16, y: Scalar = 0, z: Scalar = 0)⏎ -> 2D
                          op std::ops::translate(x: Length = 0mm, y: Length = 8mm, z: Length = 0mm) -> 2D
                            Transform __builtin::ops::translate(x: Scalar = 0, y: Scalar = 8, z: Scalar = 0)⏎ -> 2D
                              op std::ops::translate(x: Length = 8mm, y: Length = 8mm, z: Length = 0mm) -> 2D
                                Transform __builtin::ops::translate(x: Scalar = 8, y: Scalar = 8, z: Scalar = 0)⏎ -> 2D
                                  op std::ops::translate(x: Length = 16mm, y: Length = 8mm, z: Length = 0mm) -> 2D
                                    Transform __builtin::ops::translate(x: Scalar = 16, y: Scalar = 8, z: Scalar = 0)⏎ -> 2D
                                      op std::ops::translate(x: Length = 0mm, y: Length = 16mm, z: Length = 0mm) -> 2D
                                        Transform __builtin::ops::translate(x: Scalar = 0, y: Scalar = 16, z: Scalar = 0)⏎ -> 2D
                                          op std::ops::translate(x: Length = 8mm, y: Length = 16mm, z: Length = 0mm) -> 2D
                                            Transform __builtin::ops::translate(x: Scalar = 8, y: Scalar = 16, z: Scalar = 0)⏎ -> 2D
                                              op std::ops::translate(x: Length = 16mm, y: Length = 16mm, z: Length = 0mm) -> 2D
                                                Transform __builtin::ops::translate(x: Scalar = 16, y: Scalar = 16, z: Scalar = 0)⏎ -> 2D
                                                  op std::ops::translate(x: Length = 0mm, y: Length = 24mm, z: Length = 0mm) -> 2D
                                                    Transform __builtin::ops::translate(x: Scalar = 0, y: Scalar = 24, z: Scalar = 0)⏎ -> 2D
                                                      op std::ops::translate(x: Length = 8mm, y: Length = 24mm, z: Length = 0mm) -> 2D
                                                        Transform __builtin::ops::translate(x: Scalar = 8, y: Scalar = 24, z: Scalar = 0)⏎ -> 2D
                                                          op std::ops::translate(x: Length = 16mm, y: Length = 24mm, z: Length = 0mm) -> 2D
                                                            Transform __builtin::ops::translate(x: Scalar = 16, y: Scalar = 24, z: Scalar = 0)⏎ -> 2D
                                                              op std::ops::translate(x: Length = 0mm, y: Length = 32mm, z: Length = 0mm) -> 2D
                                                                Transform __builtin::ops::translate(x: Scalar = 0, y: Scalar = 32, z: Scalar = 0)⏎ -> 2D
                                                                  op std::ops::translate(x: Length = 8mm, y: Length = 32mm, z: Length = 0mm) -> 2D
                                                                    Transform __builtin::ops::translate(x: Scalar = 8, y: Scalar = 32, z: Scalar = 0)⏎ -> 2D
                                                                      op std::ops::translate(x: Length = 16mm, y: Length = 32mm, z: Length = 0mm) -> 2D
                                                                        Transform __builtin::ops::translate(x: Scalar = 16, y: Scalar = 32, z: Scalar = 0)⏎ -> 2D
                                                                          sketch std::geo2d::Ring(inner: Length = 4.8mm, outer: Length = 6.51mm) -> 2D
                                                                            Operation subtract()⏎ -> 2D
                                                                              Group -> 2D
                                                                                sketch std::geo2d::Circle(center: (x: Length, y: Length) = (x: Length = 0mm, y: Length = 0mm), radius: Length = 6.51mm) -> 2D
                                                                                  Primitive2D __builtin::geo2d::Circle(cx: Scalar = 0, cy: Scalar = 0, radius: Scalar = 6.51)⏎ -> 2D
                                                                                sketch std::geo2d::Circle(center: (x: Length, y: Length) = (x: Length = 0mm, y: Length = 0mm), radius: Length = 4.8mm) -> 2D
                                                                                  Primitive2D __builtin::geo2d::Circle(cx: Scalar = 0, cy: Scalar = 0, radius: Scalar = 4.8)⏎ -> 2D
    sketch <NO ID>::Knobs(columns: Integer = 4, rows: Integer = 2) -> 2D
      op <NO ID>::grid(columns: Integer = 4, rows: Integer = 2) -> 2D
        Operation __builtin::ops::align()⏎ -> 2D
          op std::ops::translate(x: Length = 0mm, y: Length = 0mm, z: Length = 0mm) -> 2D
            Transform __builtin::ops::translate(x: Scalar = 0, y: Scalar = 0, z: Scalar = 0)⏎ -> 2D
              op std::ops::translate(x: Length = 8mm, y: Length = 0mm, z: Length = 0mm) -> 2D
                Transform __builtin::ops::translate(x: Scalar = 8, y: Scalar = 0, z: Scalar = 0)⏎ -> 2D
                  op std::ops::translate(x: Length = 16mm, y: Length = 0mm, z: Length = 0mm) -> 2D
                    Transform __builtin::ops::translate(x: Scalar = 16, y: Scalar = 0, z: Scalar = 0)⏎ -> 2D
                      op std::ops::translate(x: Length = 0mm, y: Length = 8mm, z: Length = 0mm) -> 2D
                        Transform __builtin::ops::translate(x: Scalar = 0, y: Scalar = 8, z: Scalar = 0)⏎ -> 2D
                          op std::ops::translate(x: Length = 8mm, y: Length = 8mm, z: Length = 0mm) -> 2D
                            Transform __builtin::ops::translate(x: Scalar = 8, y: Scalar = 8, z: Scalar = 0)⏎ -> 2D
                              op std::ops::translate(x: Length = 16mm, y: Length = 8mm, z: Length = 0mm) -> 2D
                                Transform __builtin::ops::translate(x: Scalar = 16, y: Scalar = 8, z: Scalar = 0)⏎ -> 2D
                                  op std::ops::translate(x: Length = 0mm, y: Length = 16mm, z: Length = 0mm) -> 2D
                                    Transform __builtin::ops::translate(x: Scalar = 0, y: Scalar = 16, z: Scalar = 0)⏎ -> 2D
                                      op std::ops::translate(x: Length = 8mm, y: Length = 16mm, z: Length = 0mm) -> 2D
                                        Transform __builtin::ops::translate(x: Scalar = 8, y: Scalar = 16, z: Scalar = 0)⏎ -> 2D
                                          op std::ops::translate(x: Length = 16mm, y: Length = 16mm, z: Length = 0mm) -> 2D
                                            Transform __builtin::ops::translate(x: Scalar = 16, y: Scalar = 16, z: Scalar = 0)⏎ -> 2D
                                              op std::ops::translate(x: Length = 0mm, y: Length = 24mm, z: Length = 0mm) -> 2D
                                                Transform __builtin::ops::translate(x: Scalar = 0, y: Scalar = 24, z: Scalar = 0)⏎ -> 2D
                                                  op std::ops::translate(x: Length = 8mm, y: Length = 24mm, z: Length = 0mm) -> 2D
                                                    Transform __builtin::ops::translate(x: Scalar = 8, y: Scalar = 24, z: Scalar = 0)⏎ -> 2D
                                                      op std::ops::translate(x: Length = 16mm, y: Length = 24mm, z: Length = 0mm) -> 2D
                                                        Transform __builtin::ops::translate(x: Scalar = 16, y: Scalar = 24, z: Scalar = 0)⏎ -> 2D
                                                          op std::ops::translate(x: Length = 0mm, y: Length = 32mm, z: Length = 0mm) -> 2D
                                                            Transform __builtin::ops::translate(x: Scalar = 0, y: Scalar = 32, z: Scalar = 0)⏎ -> 2D
                                                              op std::ops::translate(x: Length = 8mm, y: Length = 32mm, z: Length = 0mm) -> 2D
                                                                Transform __builtin::ops::translate(x: Scalar = 8, y: Scalar = 32, z: Scalar = 0)⏎ -> 2D
                                                                  op std::ops::translate(x: Length = 16mm, y: Length = 32mm, z: Length = 0mm) -> 2D
                                                                    Transform __builtin::ops::translate(x: Scalar = 16, y: Scalar = 32, z: Scalar = 0)⏎ -> 2D
                                                                      sketch std::geo2d::Circle(c: (x: Length, y: Length) = (x: Length = 0mm, y: Length = 0mm), d: Length = 4.8mm) -> 2D
                                                                        Primitive2D __builtin::geo2d::Circle(cx: Scalar = 0, cy: Scalar = 0, radius: Scalar = 2.4)⏎ -> 2D

-- Test Result --
OK
Export successful.
