/// Âµcad standard library

namespace geo2d {
    /// Circle module definition
    ///
    /// Examples:
    /// * with radius `r`: `circle(r = 10.0mm);`
    /// * with diameter `d`: `circle(d = 5.0mm);`
    module circle(radius: Length) {
        init(r: Length) {
            radius = r;
        }

        init(diameter: Length) {
            radius = diameter / 2.0;
        }

        init(d: Length) {
            radius = d / 2.0;
        }

        __builtin::geo2d::circle(radius / 1mm);
    }

    /// Rectangle module definition
    /// 
    /// Examples:
    /// * centered rect with width `w` and height `h`: `rect(width = 10.0mm, height = 5.0mm);`
    module rect {
        init(width: Length, height: Length) {
            x = -width / 2.0; // center x
            y = -height / 2.0; // center y
        }

        init(size: Length) {
            width = size;
            height = size;
            x = -size / 2.0; // center x
            y = -size / 2.0; // center y
        }
        
        __builtin::geo2d::rect(
                width / 1mm,
                height / 1mm,
                x / 1mm,
                y / 1mm
        );
    }
}

namespace geo3d {
    /// Sphere module definition
    ///
    /// Examples:
    /// * with radius `r`: `sphere(r = 10.0mm);`
    module sphere {
        init(radius: Length) {}

        init(r: Length) {
            radius = r;
        }

        __builtin::geo3d::sphere(radius / 1mm);
    }

    /// Cube module definition
    ///
    /// Examples:
    /// * with size `s`: `cube(s = 10.0mm);`
    /// * with size `x`, `y`, and `z`: `cube(size_x = 10.0mm, size_y = 5.0mm, size_z = 3.0mm);`
    module cube {
        init(size: Length) {
            size_x = size;
            size_y = size;
            size_z = size;
        }

        init(size_x: Length, size_y: Length, size_z: Length) { }

        __builtin::transform::translate(
                -size_x / 2.0 / 1mm,
                -size_y / 2.0 / 1mm,
                -size_z / 2.0 / 1mm
        ) {
            __builtin::geo3d::cube(
                size_x / 1mm,
                size_y / 1mm,
                size_z / 1mm
            );
        }
    }

    /// Cylinder module definition
    ///
    /// Examples:
    /// * with radius `r` and height `h`: `cylinder(r = 10.0mm, h = 5.0mm);`
    module cylinder {
        init(radius: Length, height: Length) {
            top = height / 2.0;
            bottom = -top;
        }

        init(r: Length, h: Length) {
            radius = r;
            height = h;
            top = height / 2.0;
            bottom = -top;
        }

        init(r: Length, bottom: Length, top: Length) {
            radius = r;
            height = top - bottom;
        }

        init(d: Length, bottom: Length, height: Length) {
            radius = d / 2.0;
            top = bottom + height;
        }

        init(d: Length, h: Length) {
            radius = d / 2.0;
            height = h;
            top = height / 2.0;
            bottom = -top;
        }

        __builtin::transform::translate(x = 0.0, y = 0.0, z = bottom / 1mm) {
            __builtin::geo3d::cylinder(
                radius_bottom = radius / 1mm,
                radius_top = radius / 1mm,
                height = height / 1mm
            );
        }
    }
}

namespace algorithm {
    pub use __builtin::algorithm::difference;
    pub use __builtin::algorithm::union;
    pub use __builtin::algorithm::intersection;
}

module translate(x = 0.0mm, y = 0.0mm, z = 0.0mm) {
    __builtin::transform::translate(x / 1mm, y / 1mm, z / 1mm) {
        @children
    }
}

module rotate {
    init(Angle: angle) {
        x = 0.0;
        y = 0.0;
        z = 1.0;
    }

    __builtin::transform::rotate(angle / 1rad, x, y, z) {
        @children
    }
}


pub use __builtin::math; // Use the math module from the builtin library

pub use __builtin::export;
pub use __builtin::assert;
pub use __builtin::print;
