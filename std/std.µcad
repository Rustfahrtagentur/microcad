/// ÂµCAD standard library

namespace geo2d {
    /// Circle module definition
    ///
    /// Examples:
    /// * with radius `r`: `circle(r = 10.0mm);`
    /// * with diameter `d`: `circle(d = 5.0mm);`
    module circle {
        init(radius: length) {}

        init(r: length) {
            radius = r;
        }

        init(diameter: length) {
            radius = diameter / 2.0;
        }

        init(d: length) {
            radius = d / 2.0;
        }

        __builtin::geo2d::circle(radius / 1mm);
    }

    /// Rectangle module definition
    /// 
    /// Examples:
    /// * centered rect with width `w` and height `h`: `rect(width = 10.0mm, height = 5.0mm);`
    module rect {
        init(width: length, height: length) {
            x = -width / 2.0; // center x
            y = -height / 2.0; // center y
        }
        
        __builtin::geo2d::rect(
                width / 1mm,
                height / 1mm,
                x / 1mm,
                y / 1mm
        );
    }
}

namespace geo3d {
    /// Sphere module definition
    ///
    /// Examples:
    /// * with radius `r`: `sphere(r = 10.0mm);`
    module sphere {
        init(radius: length) {}

        init(r: length) {
            radius = r;
        }

        __builtin::geo3d::sphere(radius / 1mm);
    }

    /// Cube module definition
    ///
    /// Examples:
    /// * with size `s`: `cube(s = 10.0mm);`
    /// * with size `x`, `y`, and `z`: `cube(size_x = 10.0mm, size_y = 5.0mm, size_z = 3.0mm);`
    module cube {
        init(size: length) {
            size_x = size;
            size_y = size;
            size_z = size;
        }

        init(size_x: length, size_y: length, size_z: length) { }

        __builtin::geo3d::cube(
                size_x / 1mm,
                size_y / 1mm,
                size_z / 1mm
        );
    }
}

namespace algorithm {
    pub use __builtin::algorithm::difference;
    pub use __builtin::algorithm::union;
    pub use __builtin::algorithm::intersection;
}

pub use __builtin::export;
pub use __builtin::assert;
