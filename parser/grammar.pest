ws = _{ " " | "\n" | "\t" | "\r" } // Whitespace

alpha_lower = _{ 'a'..'z' }
alpha_upper = _{ 'A'..'Z' }
alpha = _{ alpha_lower | alpha_upper }
digit = _{ '0'..'9' }

//`a`: ok
//`a1`: ok
//`a_`: ok
//`_a`: ok
//`_`: ok
//`1`: error
//`A`: error # Identifiers are lowercase
ident = { (alpha_lower | "_") ~ (alpha_lower | digit | "_")* }

//`PI`: ok
//`A1`: ok
//`A_`: ok
//`_A`: ok
//`_`: ok
//`1`: error
//`a`: error # Constant identifiers are uppercase
constant_ident = { (alpha_upper | "_") ~ (alpha_upper | digit | "_")* }

//`1.0`: ok
//`1`: ok
//`.1`: error
//`qwqeaq`: error
number = @{ ("-"? ~ int) ~ ("." ~ ASCII_DIGIT+ ~ exp? | exp)? }
int    = @{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
exp    = @{ ("E" | "e") ~ ("+" | "-")? ~ ASCII_DIGIT+ }

//`"a"`: ok
//`"a\n"`: ok
//`"a\""`: ok
string_literal  = @{ "\"" ~ inner ~ "\"" }
inner   = @{ (!("\"" | "\\") ~ ANY)* ~ (escape ~ inner)? }
escape  = @{ "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | unicode) }
unicode = @{ "u" ~ ASCII_HEX_DIGIT{4} }

//`true`: ok
//`false`: ok
//`True`: error
//`False`: error
bool_literal = @{ "true" | "false" }

length_unit = @{ "mm" | "m" | "cm" | "in" }
angle_unit = @{ "°" | "deg" | "rad" | "pi" }
unit = @{ length_unit | angle_unit }

//`1`: ok
//`1mm`: ok
//`1.0mm`: ok
//`1.0`: ok
literal = { number ~ unit | string_literal | bool_literal | number }

//`a`: ok # Single identifier
//`a.b`: ok # Nested identifiers
//`a.b. c`: error # No whitespace between identifiers
//`a.b.c.`: error # No trailing dot
//`math.PI`: ok # Constant identifiers are allowed
//`PI`: ok # Single constant identifier
//`math.PI.PI`: ok # Nested constant identifiers (todo: check if this is allowed) 
qualified_name = { (ident | constant_ident) ~ ("." ~ (ident | constant_ident))* }
qualified_name_all = { "*" }
qualified_name_list = { qualified_name ~ ("," ~ ws* ~ qualified_name)* }

//`int`: ok
//`[scalar]`: ok # List type
type = { qualified_name | list_type }

//`[number]`: ok
list_type = { "[" ~ ws* ~ type ~ ws * ~ "]" }

//`: number`: ok
//`: <Vec3>`: error
type_specifier = { ":" ~ ws* ~ type }

//`use a;`: ok  # Import a single module
//`use ;`: error # Must import at least one module
//`use foo.bar, bar.foo;`: ok # Import multiple modules
//`use bar, baz from a;`: ok # Import multiple sub modules from module a 
//`use * from a;`: ok # Import everything from a and merge into current scope
//`use * from a, b;`: ok # Import everything from a and b and merge into current scope
//`use a as b;`: ok # Import as alias
//`use a as b.a;`: error # Cannot use nested identifiers alias 
//`use foo.bar, bar.foo as baz;`: error # Alias is not supported for multiple modules
//`use foo.bar as baz from bar.foo;`: ok # Use alias for single module
use_statement = { "use" ~ ws+ ~ qualified_name_list ~ ws* ~ ";" 
    | "use" ~ ws+ ~ qualified_name_list ~ ws+ ~ "from" ~ ws+ ~ qualified_name ~ ws* ~ ";"
    | "use" ~ ws+ ~ qualified_name_all ~ ws+ ~ "from" ~ ws+ ~ qualified_name_list ~ ws* ~ ";"
    | "use" ~ ws+ ~ use_alias ~ ws* ~ ";"
    | "use" ~ ws+ ~ use_alias ~ ws+ ~ "from" ~ ws+ ~ qualified_name ~ ws* ~ ";" 
}
use_alias = { qualified_name ~ ws+ ~ "as" ~ ws+ ~ ident }

expression = { literal | qualified_name /*| function_call | qualified_name | array_literal 
 | "(" ~ ws* ~ expression ~ ws* ~ ")" | unary_expression  | binary_expression */ }

unary_expression = { unary_operator ~ ws* ~ expression }
unary_operator = { "-" }

//`[1, 2, 3]`: ok
//`[1, 2, 3,]`: error # Trailing comma
//`[]`: ok
list_literal = { "[" ~ (ws* ~ expression ~ ws* ~ ("," ~ ws* ~ expression ~ ws*)*)? ~ ws* ~ "]" }

//`r = 5.0mm`: ok # Named argument
//`2.0mm`: ok # Positional argument
function_argument = { (ident ~ ws* ~ "=" ~ ws*)? ~ expression }

//`a = 5.0mm, b = false`: ok
function_argument_list = { function_argument ~ ws* ~ ("," ~ ws* ~ function_argument ~ ws*)* }

//`function(a = 3.0mm)`: ok
//`function(a = 3.0mm, b = 2.0mm)`: ok
//`a.nested.function(a = 3.0mm, b = 2.0mm)`: ok
function_call = { qualified_name ~ ws* ~ "(" ~ ws* ~ function_argument_list? ~ ws* ~ ")" }

//`r: length = 5.0mm`: ok
//`r = 5.0mm`: error # Type specifier is required, type inference is not supported yet
//`r: length`: ok # Default value is not required
//`r: length = math.PI`: ok # Constant value is allowed
parameter_declaration = { ident ~ ws* ~ type_specifier ~ ws* ~ ("=" ~ ws* ~ expression)? }

//`r: length = 5.0mm;`: ok
parameter_declaration_statement = { parameter_declaration ~ ws* ~ ";" }

//`fn foo() -> scalar { return math.PI; }`: ok
//`fn foo() -> scalar {}`: error # Function must have a return statement
//`fn foo() { return 5.0mm; }`: error # Function must have specified return type
//`fn foo(a: scalar) -> scalar { return a; }`: ok # Function with arguments
//`fn foo(a: scalar, b: scalar) -> scalar { return b; }`: ok # Function with multiple arguments
function_declaration = { "fn" ~ ws+ ~ ident ~ ws* ~ "(" ~ ws* ~ function_declaration_argument_list? ~ ws* ~ ")" ~ ws* ~ function_declaration_return_value ~ ws* ~ "{" ~ ws* ~ statement* ~ ws* ~ function_return_statement ~ ws* ~ "}" }

//`a: scalar`: ok
function_declaration_argument =  { parameter_declaration }

//`-> scalar`: ok
function_declaration_return_value = { "->" ~ ws* ~ type }

//`return 5.0mm;`: ok
function_return_statement = { "return" ~ ws* ~ expression ~ ws* ~ ";" }

//`a: scalar, b: scalar`: ok # Multiple arguments
//`a: scalar, b: scalar = 5.0mm`: ok # Default value for second argument
//`a: scalar = 5.0mm, b: scalar`: ok # Even first argument can have default value and rest can be positional
function_declaration_argument_list = { function_declaration_argument ~ ws* ~ ("," ~ ws* ~ function_declaration_argument ~ ws*)* }


//`circle(r = 5.0mm);`: ok
//`circle(r = 5.0mm) {}`: ok
//`translate(x = 5.0mm) { rectangle(width = 5.0); }`: ok
//`translate(x = 5.0mm) { rotate(angle = 90°) { rectangle(width = 5.0mm); } }`: ok
//`translate(r = 5.0mm) circle(r = 5.0mm);`: ok
//`name := node() {}`: ok
//`name := node();`: ok
object_node_statement = { 
    object_node_id_assignment? ~ (function_call ~ ws*)+ ~ ";" |
    object_node_id_assignment? ~ (function_call ~ ws*)+ ~ "{" ~ object_node_inner ~ "}" 
}
object_node_id_assignment = { ident ~ ws* ~ ":=" ~ ws* }
object_node_inner = { (ws* ~ statement ~ ws*)* }

statement = { object_node_statement | use_statement | function_declaration | parameter_declaration_statement }

//`translate(x = 5.0mm) { rectangle(width = 5.0mm); } translate(x = 5.0mm) { rotate(angle = 90°) { rectangle(width = 5.0); } }`: ok
document = { SOI ~ (statement ~ ws* )* ~ EOI }

COMMENT = { doc_comment | single_line_comment | multi_line_comment }

//`// ok`: ok
//`/ err` error
single_line_comment = ${ "//" ~ (!"\n" ~ ANY)* }

//`/// ok`: ok
//`// err` error
doc_comment = { "///" ~ (!"\n" ~ ANY)* }

//`/* ok */`: ok
multi_line_comment = ${ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }