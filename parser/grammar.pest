ws = _{ " " | "\n" | "\t" | "\r" } // Whitespace

alpha_lower = _{ 'a'..'z' }
alpha_upper = _{ 'A'..'Z' }
alpha = _{ alpha_lower | alpha_upper }
digit = _{ '0'..'9' }

//`a`: ok
//`a1`: ok
//`a_`: ok
//`_a`: ok
//`_`: ok
//`1`: error
//`A`: error # Identifiers are lowercase
ident = { (alpha_lower | "_") ~ (alpha_lower | digit | "_")* }

//`A`: ok
//`A1`: ok
//`A_`: ok
//`_A`: ok
//`_`: ok
//`1`: error
//`a`: error # Constant identifiers are uppercase
constant_ident = { (alpha_upper | "_") ~ (alpha | digit | "_")* }

//`1.0`: ok
//`1`: ok
//`.1`: error
//`qwqeaq`: error
number = @{ ("-"? ~ int) ~ ("." ~ ASCII_DIGIT+ ~ exp? | exp)? }
int    = @{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
exp    = @{ ("E" | "e") ~ ("+" | "-")? ~ ASCII_DIGIT+ }

//`"a"`: ok
//`"a\n"`: ok
//`"a\""`: ok
string_literal  = @{ "\"" ~ inner ~ "\"" }
inner   = @{ (!("\"" | "\\") ~ ANY)* ~ (escape ~ inner)? }
escape  = @{ "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | unicode) }
unicode = @{ "u" ~ ASCII_HEX_DIGIT{4} }

//`true`: ok
//`false`: ok
//`True`: error
//`False`: error
bool_literal = @{ "true" | "false" }

length_unit = @{ "mm" | "m" | "cm" | "in" }
angle_unit = @{ "°" | "deg" | "rad" | "pi" }
unit = @{ length_unit | angle_unit }

//`1`: ok
//`1mm`: ok
//`1.0mm`: ok
//`1.0`: ok
literal = { number ~ unit | string_literal | bool_literal | number }

//`a`: ok # Single identifier
//`a.b`: ok # Nested identifiers
//`a.b. c`: error # No whitespace between identifiers
qualified_name = { ident ~ ("." ~ ident)* }

//`int`: ok
type = { qualified_name | array_type | tuple_type }

//`(number, number)`: ok
//`( number, number  )`: ok
tuple_type = { "(" ~ ws * ~ type ~ ws * ~ ("," ~ ws* ~ type)* ~ ws* ~ ")" }

//`[number]`: ok
array_type = { "[" ~ ws* ~ type ~ ws * ~ "]" }

//`: number`: ok
//`: <Vec3>`: error
type_specifier = { ":" ~ ws* ~ type }

//`a: number`: ok
//`a: number = 1`: ok
//`a = 1.0`: error
function_decl_argument = { ident ~ ws* ~ type_specifier ~ (ws* ~ "=" ~ ws* ~ literal)? }

//`a: number, b: number`: ok
function_decl_argument_list = { ident ~ ws* ~ type_specifier ~ ws* ~ ("," ~ ws* ~ ident ~ ws* ~ ":" ~ ws* ~ qualified_name ~ ws*)* }

//`use a;`: ok  # Import a module
//`use a as b;`: ok # Import as alias
//`use a as b.a;`: error # Cannot use nested identifiers alias 
//`use * from a;`: ok # Import all and merge into current scope
use_statement = { "use" ~ ws+ ~ qualified_name ~ ws* ~ ";" 
    | "use" ~ ws+ ~ qualified_name ~ ws+ ~ "as" ~ ws+ ~ ident ~ ws* ~ ";" 
    | "use" ~ ws+ ~ "*" ~ ws+ ~ "from" ~ ws+ ~ qualified_name ~ ws* ~ ";"
}

expression = { literal }


//`r = 5.0mm`: ok
//`a = 5m`: ok
function_argument = { ident ~ ws* ~ "=" ~ ws* ~ expression }

//`a = 5.0mm, b = false`: ok
function_argument_list = { function_argument ~ ws* ~ ("," ~ ws* ~ function_argument ~ ws*)* }

//`function(a = 3.0mm)`: ok
//`function(a = 3.0mm, b = 2.0mm)`: ok
function_call = { ident ~ ws* ~ "(" ~ ws* ~ function_argument_list? ~ ws* ~ ")" }



//`circle(r = 5.0mm);`: ok
//`circle(r = 5.0mm) {}`: ok
//`translate(x = 5.0mm) { rectangle(width = 5.0); }`: ok
//`translate(x = 5.0mm) { rotate(angle = 90°) { rectangle(width = 5.0mm); } }`: ok
//`translate(r = 5.0mm) circle(r = 5.0mm);`: ok
//`name := node() {}`: ok
//`name := node();`: ok
object_node_statement = { 
    object_node_id_assignment? ~ (function_call ~ ws*)+ ~ ";" |
    object_node_id_assignment? ~ (function_call ~ ws*)+ ~ "{" ~ object_node_inner ~ "}" 
}
object_node_id_assignment = { ident ~ ws* ~ ":=" ~ ws* }
object_node_inner = { (ws* ~ object_node_statement ~ ws*)* }

statement = { object_node_statement }

//`translate(x = 5.0mm) { rectangle(width = 5.0mm); } translate(x = 5.0mm) { rotate(angle = 90°) { rectangle(width = 5.0); } }`: ok
document = { SOI ~ (statement ~ ws* )* ~ EOI }

COMMENT = ${ single_line_comment | multi_line_comment }

//`// ok`: ok
//`/ err` error
single_line_comment = { "//" ~ (!"\n" ~ ANY)* }

//`/* ok */`: ok
multi_line_comment = { "/*" ~ (!"*/" ~ ANY)* ~ "*/" }