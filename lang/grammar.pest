// Grammar for the µCAD language
//
// Comments starting with //` generate tests for the grammar
// The strings inside the backticks (``) are the test input.
//
// Example, the following comment generates two tests for the rule "list_type":
//
// ```pest
//     //`[scalar]`: ok # list with elements of type `scalar`
//     //`[]`: error # List must have a type, lists of elements with arbitrary type are not allowed
//     list_type = { "[" ~ ws* ~ type ~ ws* ~ "]" }
// ```
//
// See the crate microcad-pest-test for more info.

ws = _{ " " | "\n" | "\t" | "\r" } // Whitespace

alpha_lower = _{ 'a'..'z' }
alpha_upper = _{ 'A'..'Z' }
alpha = _{ alpha_lower | alpha_upper }
digit = _{ '0'..'9' }

COMMENT = { 
  doc_comment | 
  single_line_comment | 
  multi_line_comment 
}

//`// ok`: ok
//`/ err` error
single_line_comment = ${ "//" ~ (!"\n" ~ ANY)* }

// Documentation comments for µCAD language
//`/// ok`: ok
//`// err` error
doc_comment = { "///" ~ (!"\n" ~ ANY)* }

//`/* ok */`: ok
multi_line_comment = ${ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

//`a`: ok
//`a1`: ok
//`a_`: ok
//`_a`: ok
//`_`: ok
//`1`: error
//`.test`: error
identifier = { !("module" | "function" | "if" | "else" | "use" | "return") ~ ((alpha | "_") ~ (alpha | digit | "_")*) }

//`a,b`: ok # A comma-separated list of identifier
identifier_list = { identifier ~ (ws* ~ "," ~ ws* ~ identifier)*}

//`1.0`: ok
//`.1`: ok
//`0.`: ok
//`1`: error: Missing decimal point
//`qwqeaq`: error
number = @{ "-"? ~ (((int ~ "." ~ ASCII_DIGIT+) | (int ~ ".") | ("." ~ ASCII_DIGIT+)) ~  exp?) | exp }
int    = @{ "0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
exp    = @{ ("E" | "e") ~ ("+" | "-")? ~ ASCII_DIGIT+ }

//`90°`: ok, with `°` unit
//`5.0mm`: ok, with `mm` unit
//`90.0`: ok, no unit
//`mm`: error
number_literal = { number ~ unit? | integer_literal ~ unit }

//`-1`: ok
//`1`: ok
//`-1.0`: error # Is float
integer_literal = { "-" ~ int | int }

//`"a"`: ok
//`"a\n"`: ok
//`"a\""`: ok
//`"hello{10}world": ok
format_string = { "\"" ~ string_literal_inner? ~ (format_expression ~ string_literal_inner?)* ~ "\"" }
string_literal_inner   = { (!("\"" | "\\" | "{" | "}" ) ~ ANY)* ~ ((bracket_escape | escape) ~ string_literal_inner)? }
bracket_escape = { "{{" | "}}" }
escape  = @{ "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t" | unicode) }
unicode = @{ "u" ~ ASCII_HEX_DIGIT{4} }

///`{a}`: ok
///`{a + b}`: ok
format_expression = { "{" ~ ws* ~ (format_spec ~ ws* ~ ":" )? ~ ws* ~ expression ~ ws* ~ "}" }

///`05.5`: ok # Five leading zeros with 5 precision
format_spec = { 
  format_spec_leading_zeros ~ format_spec_precision | 
  format_spec_leading_zeros | 
  format_spec_precision 
}

//`.5`: print with precision = 5
format_spec_precision = { "." ~ int }

//`05`: print with 5 leading zeros and precision = 0
format_spec_leading_zeros = { "0" ~ int }

//`true`: ok
//`false`: ok
//`True`: error
//`False`: error
bool_literal = @{ "true" | "false" }

unit = @{ (alpha_lower)+ | "°" | "%" }

//`#FFF`: ok # RGB, single hex
//`#00FF00`: ok # RGB, double hex
//`#FFFF`: ok # RGBA, single hex
//`#00FF00FF`: ok # RGBA, double hex
//`#00FF0`: error # No valid color
color_literal = { "#" ~ (ASCII_HEX_DIGIT{8} | ASCII_HEX_DIGIT{6} | ASCII_HEX_DIGIT{4} | ASCII_HEX_DIGIT{3}) }

//`1`: ok # Integer
//`1mm`: ok # Number (length)
//`1.0mm`: ok # Number (length)
//`1.0`: ok # Scalar
//`true`: ok # Boolean
//`#00CCFF`: ok # Color
literal = { 
  number_literal | 
  integer_literal | 
  bool_literal | 
  color_literal 
}

//`a`: ok # Single identifier
//`a::b`: ok # Nested identifiers
//`a::b ::c`: error # No whitespace between identifiers
//`a::b::c::`: error # No trailing ::
qualified_name = { identifier ~ ("::" ~ identifier)* }
qualified_name_all = { "*" }
qualified_name_list = { qualified_name ~ ("," ~ ws* ~ qualified_name)* }

//`int`: ok
//`a::nested::typename`: ok
//`[scalar]`: ok # List type
//`[scalar => scalar]`: ok # Map type
//`(scalar, scalar)`: Unnamed tuple type
//`(a: scalar, b: scalar)`: Named tuple type
//`{}`: ok # Module type
type = {
  qualified_name | 
  list_type | 
  map_type | 
  named_tuple_type | 
  unnamed_tuple_type | 
  module_type |
  unit
}

//`type a = scalar`: ok
type_declaration = { "type" ~ ws* ~ identifier ~ ws* ~ "=" ~ ws* ~ type }

type_declaration_statement = _{ type_declaration ~ ws* ~ ";"}

type_annotation = _{ ":" ~ ws* ~ type }

//`[scalar]`: ok list with elements of type `scalar`
//`[]`: error # List must have a type, lists of elements with arbitrary type are not allowed
list_type = { "[" ~ ws* ~ type ~ ws* ~ "]" }

// Associative list, behaves like a map
//`[length => string]`: maps a length to a string
map_type = { "[" ~ ws* ~ type ~ ws* ~ "=>" ~ ws* ~ type ~ ws* ~ "]" }

// Generic type for modules
module_type = { "{" ~ ws* ~ "}" }

//`(length,scalar)`: ok # 2 unnamed fields
//`(length, a: length)`: error # Cannot mix named and unnamed arguments
unnamed_tuple_type = { "(" ~ ws* ~ type ~ (ws* ~ "," ~ ws* ~ type)* ~ ws* ~ ","? ~ ws* ~ ")" }

//`(a: length, b: scalar)`: ok
//`(a: length, )`: ok # Trailing comma 
named_tuple_type = { "(" ~ ws* ~ named_tuple_type_element ~ (ws* ~ "," ~ ws* ~ named_tuple_type_element)* ~ ws* ~ ","? ~ ws* ~ ")" }

//`a: length`: ok
named_tuple_type_element = { identifier ~ ws* ~ ":" ~ ws* ~ type }

//`[1, 2, 3]`: ok
//`[1, 2, 3,]`: error # Trailing comma
//`[]`: ok
list_expression = { "[" ~ ws* ~ expression_list? ~ ws* ~ "]" ~ unit? }

//`[0]`: ok # Access first element
//`["test"]`: ok # Associative lists, access value of `\"test\"`
list_element_access = { "[" ~ ws* ~ expression ~ ws* ~ "]" } 

// An expression for both named and unnamed tuple
//`(1.0mm, 2.0mm)`: ok
//`(1.0mm,)`: error # Trailing comma
//`(x = 1.0mm, y = 2.0mm)`: ok
tuple_expression = { "(" ~ ws* ~ call_argument_list ~ ws* ~ ")" ~ unit? }

//`.0`: ok
//`.height`: ok
//`.=`: error # Neither an identifier nor an integer
tuple_element_access = { "." ~ (identifier | int) }

element_access = _{ list_element_access | tuple_element_access }

//`use a;`: ok # Import a single module
//`use ;`: error # Must import at least one module
//`use foo::bar, bar::foo;`: ok # Import multiple modules
//`use bar, baz from a;`: ok # Import multiple sub modules from module a 
//`use * from a;`: ok # Import everything from a and merge into current scope
//`use * from a, b;`: ok # Import everything from a and b and merge into current scope
//`use a as b;`: ok # Import as alias
//`use a as b::a;`: error # Cannot use nested identifiers alias 
//`use foo::bar, bar::foo as baz;`: error # Alias is not supported for multiple modules
use_statement = { "use" ~ ws+ ~ qualified_name_list ~ ws* ~ ";" 
    | "use" ~ ws+ ~ qualified_name_list ~ ws+ ~ "from" ~ ws+ ~ qualified_name ~ ws* ~ ";"
    | "use" ~ ws+ ~ qualified_name_all ~ ws+ ~ "from" ~ ws+ ~ qualified_name_list ~ ws* ~ ";"
    | "use" ~ ws+ ~ use_alias ~ ws* ~ ";"
}
use_alias = { qualified_name ~ ws+ ~ "as" ~ ws+ ~ identifier }


//`translate() rotate()`: ok
//`translate() rotate() { translate() rotate() {} }`: ok
//`rotate() {}`: ok
//`{}`: ok # Empty block
//`{ translate() rotate(); }`: ok
//`{} {}`: error # Cannot nest module bodies
//`holes.edges`: error # No tuple access in nested module
nested = { (call | qualified_name) ~ (ws+ ~ (call | qualified_name))* ~ (ws* ~ module_body)? | module_body }


//`-5.0mm`: ok # Negate
//`(a+b)*(c-a)`: ok 
//`a + b + c`: ok 
//`math::pi`: ok # Singleton access with qualified name or namespace access
//`! a`: ok # Unary operator with whitespace 
//`a-`: error # Unknown postfix operator `-`
//`a[2]`: ok # List access
//`a.b`: ok # Tuple access
//`(b = 3.0).b`: ok # Tuple access
//`a::b()`: ok # Method call
//`a::b().c`: ok # Nested method call
//`a::b.c`: ok # Nested tuple access
//`a and b`: ok # Binary operator
//`[3,5,5]`: ok # List expression
//`1 if 3 > 2 else 0`: ok # Ternary operator
//`a()`: ok # Simple call
//`a({sphere(4.0)})`: ok # Pass a module as function parameter
//`translate() rotate()`: ok # Nested call
//`translate() rotate() { translate() rotate() {} }`: ok # Nested call
//`a | a::b()`: ok
//`a | b & c`: ok
//`a() b() | b & c | d`: ok
//`circle(r = 5.0mm)`: ok
//`circle(r = 5.0mm) {}`: ok
//`translate(x = 5.0mm) { rectangle(width = 5.0mm); }`: ok
//`translate(x = 5.0mm) { rotate(angle = 90°) { rectangle(width = 5.0mm); } }`: ok
//`translate(r = 5.0mm) circle(r = 5.0mm)`: ok
//`{}`: ok # Empty block
//`{ rectangle(width = 5.0mm); }`: ok # Single statement block
//`translate(x = 5mm)`: ok
//`ring_array(30mm, 8, {circle(5mm)})`: ok # Pass a module as function parameter
//`[hole_positions.bottom]`: ok # List access with tuple access
//`mountable_plate(hole_positions = hole_positions.edges - [hole_positions.bottom])`: ok # Tuple access
expression       =   { unary_op* ~ ws* ~ primary ~ ws* ~ postfix* ~ (ws* ~ bin_op ~ ws* ~ unary_op* ~ ws* ~ primary ~ ws* ~ postfix*)* }
bin_op           =  _{ add | subtract | multiply | divide | union | intersection | power_xor | greater_than | less_than | greater_equal | less_equal | equal | not_equal | and | or | xor | if_binary_op | else_binary_op }
  add            =   { "+" }
  subtract       =   { "-" }
  multiply       =   { "*" }
  divide         =   { "/" }
  union          =   { "|" }
  intersection   =   { "&" }
  power_xor      =   { "^" }
  greater_than   =   { ">" }
  less_than      =   { "<" }
  greater_equal  =   { ">=" }
  less_equal     =   { "<=" }
  equal          =   { "==" }
  not_equal      =   { "!=" }
  and            =   { "and" }
  or             =   { "or" }
  xor            =   { "xor" }
  if_binary_op   =   { "if" }
  else_binary_op =   { "else" }

unary_op         =  _{ unary_minus | unary_plus | unary_not }
  unary_minus    =   { "-" }
  unary_plus     =   { "+" }
  unary_not      =   { "!" }
postfix          =  _{ method_call | list_element_access | tuple_element_access }
primary          =  _{ nested | literal | format_string | "(" ~ ws* ~ expression ~ ws* ~ ")" | tuple_expression | list_expression }

//`a, b, c`: ok
//`1+2, 4*3, 3.2`: ok
//`,,`: error # No expression 
expression_list = { expression ~ (ws* ~ "," ~ ws* ~ expression)* }

// A statement that is an single expression
expression_statement = _{ expression ~ ws* ~ ";" | expression? ~ ws* ~ module_body | module_body }

//`1..4`: ok
//`a..b`: ok
range_expression = { (integer_literal | expression) ~ ws* ~ ".." ~ ws* ~ (integer_literal | expression) }

unary_expression = { unary_operator ~ ws* ~ expression }
unary_operator = { "-" }

// Default value collapses to a single expression
default_value = _{ "=" ~ ws* ~ expression }

//`r = 5.0mm`: ok # Named argument
call_named_argument = { identifier ~ ws* ~ "=" ~ ws* ~ expression }

//`2.0mm`: ok # Positional argument
call_positional_argument = _{ expression }

call_argument = _{
  call_named_argument | 
  call_positional_argument 
}

//`a = 5.0mm, b = false`: ok
//`4.0mm, a = false`: ok
//`a = false, 4.0mm`: ok # Positional argument after named argument (Syntactically correct, semantically wrong) 
call_argument_list = { call_argument ~ (ws* ~ "," ~ ws* ~ call_argument)* }

call_op = _{ "(" ~ ws* ~ call_argument_list? ~ ws* ~ ")" }

//`translate() rotate()`: ok
nested_call = { call ~ (ws+ ~ call)* }

//`.sum()`: ok
method_call = { "." ~ ws* ~ identifier ~ ws* ~ call_op }

//`function(a = 3.0mm)`: ok
//`function(a = 3.0mm, b = 2.0mm)`: ok
//`a::nested::function(a = 3.0mm, b = 2.0mm)`: ok
call = { qualified_name ~ ws* ~ call_op }

//`@foo`: ok
//`@foo(x)`: ok
attribute = { "@" ~ qualified_name ~ call_op? }

attribute_list = _{ attribute ~ (ws+ ~ attribute)* }


//`r: length = 5.0mm`: ok
//`r = 5.0mm`: ok # Type specifier with type inference
//`r: length`: error # Default value is required
//`r: length = math::pi`: ok # Type specifier + Default value from constant
//`r`: error # neither type specifier or default value
assignment = { identifier ~ ws* ~ type_annotation? ~ ws* ~ "=" ~ ws* ~ expression }

assignment_statement = _{ assignment ~ ws* ~ ";" }


// Rule for a single parameter of a definition
//`r: length = 5.0mm`: ok
//`r = 5.0mm`: ok # Type specifier with type inference
//`r: length`: ok # Default value is NOT required
//`r: length = math::pi`: ok # Type specifier + Default value from constant
//`r`: error # neither type specifier or default value
parameter = { identifier ~ ws* ~ type_annotation? ~ ws* ~ "=" ~ ws* ~ expression | identifier ~ ws* ~ type_annotation  }

parameter_list = { "(" ~ ws* ~ (parameter ~ (ws* ~ "," ~ ws* ~ parameter)* ~ ws*)? ~ ","? ~ ")" }


//`(a: scalar) -> scalar`: ok # Function signature with arguments
//`() -> scalar`: ok # Function signature with no arguments
//`(a: scalar, b: scalar) -> scalar`: ok # Function signature with multiple arguments
//`(a: scalar = 2.0, b: scalar = 3.0) -> scalar`: ok # Function signature with default values
//`(a: scalar = 2.0, b: scalar = 3.0)`: ok # Function signature without return type
function_signature = { parameter_list ~ (ws* ~ "->" ~ ws* ~ type)? }

//`function foo() -> scalar { return math::pi; }`: ok
//`function foo() -> scalar {}`: ok # Empty function
//`function foo() { return 5.0mm; }`: ok # Function return type is inferred
//`function foo(a: scalar) -> scalar { return a; }`: ok # Function with arguments
//`function foo(a: scalar, b: scalar) -> scalar { return a + b; }`: ok # Function with multiple arguments
//`function foo(a: scalar, b: scalar) -> scalar { return a + b; }`: ok # Function with multiple arguments
//`function test(a: scalar, b: scalar) -> scalar { c = 1.0; return a + b + c; }`: ok # Function with multiple arguments and local variable
//`function weight(density: density = 20g/1mm^3) -> weight {}` ok # Function with default value
//`function bar(a: scalar) -> scalar { a }`: ok # Function with no return type
function_definition = { "function" ~ ws+ ~ identifier ~ ws* ~ function_signature ~ ws* ~ function_body }

function_body = { "{" ~ ((ws* ~ function_statement)+ | ws* ~ expression)? ~ ws* ~ "}" }

function_statement = { 
  assignment_statement | 
  use_statement | 
  function_definition | 
  function_return_statement | 
  function_if_statement 
}

//`return 5.0mm;`: ok
function_return_statement = { "return" ~ ws* ~ expression ~ ws* ~ ";" }

//`if a > 5.0mm { return 5.0mm; }`: ok
//`if a > 5.0mm { return 5.0mm; } else { return 4.0mm; }`: ok
function_if_statement = { "if" ~ ws* ~ expression ~ ws* ~ function_body ~ ws* ~ ("else" ~ ws* ~ function_body)? }

//`module foo() { }`: ok # Module with no arguments
//`module foo(a: scalar) { }`: ok # Module with arguments
//`module foo(a: scalar, b: scalar) { }`: ok # Module with multiple arguments
//`module foo() { return 5.0mm; }`: error # Module cannot have return statement
//`module foo() { module bar() { } }`: ok # Nested module definition
//`module foo() { a: scalar = 5.0; function bar() -> scalar { return 1; } }`: ok # Parameter and nested function
//`module list(count: int, delegate: {}) { translate(x = [0..count]*5mm) delegate; }`: ok # Module with module as argument
//`module foo() { init(size: length) { rectangle(size); } }`: ok # Module with init function
//`module foo() { function bar(a: scalar) -> scalar { a } }`: ok # Module with function
//`module donut(radius) { }`: error # Module must have type annotations
module_definition = { (attribute_list ~ ws+)? ~ "module" ~ ws+ ~ identifier ~ ws* ~ parameter_list? ~ ws* ~ module_body }

//`{ translate() rotate(); }`: ok
//`{ translate() }`: ok # Single expression block (no semicolon)
//`{}`: ok # Empty block
module_body = { "{" ~ ws* ~ module_inner? ~ ws* ~ "}" }

module_inner = _{ 
  ws* ~ (module_statement ~ ws*)+ | 
  ws* ~ (module_statement ~ ws*)* ~ (function_definition | expression) 
}

module_statement = { 
  use_statement |
  module_definition |
  function_definition |
  module_init_definition |
  for_statement |
  assignment_statement |
  expression_statement
}

//`init(d: length) { r = d / 2; }`: ok
//`init(size: length) { size = size; }`: ok
//`init(size: length) { rectangle(size); }: ok
module_init_definition = { "init" ~ ws* ~ parameter_list ~ ws* ~ "{" ~ ws* ~ module_init_inner? ~ ws* ~ "}" }

module_init_statement = { 
  use_statement | 
  function_definition | 
  assignment_statement | 
  expression_statement 
}

module_init_inner = _{ 
  ws* ~ (module_init_statement ~ ws*)+ |
  ws* ~ (module_init_statement ~ ws*)* ~ expression 
}

//`for i in [0..10] { translate(x = i*5mm); }`: ok
for_statement = { "for" ~ ws* ~ identifier ~ ws* ~ "in" ~ ws* ~ expression ~ ws* ~ module_body }


//`namespace math { }`: ok # namespace (like module with no arguments)
//`namespace math { function pi() -> scalar { return 3.14159; } }`: ok # namespace with function
namespace_definition = { "namespace" ~ ws+ ~ identifier ~ ws* ~ namespace_body }

namespace_body = { "{" ~ ws* ~ namespace_inner? ~ ws* ~ "}" }

namespace_inner = _{ ws* ~ (namespace_statement ~ ws*)+ }

namespace_statement = { 
  use_statement | 
  module_definition | 
  namespace_definition | 
  function_definition | 
  assignment_statement 
}

source_file_statement = { 
  use_statement | 
  module_definition | 
  namespace_definition | 
  function_definition | 
  assignment_statement |
  for_statement |
  expression_statement
}

source_file_inner = _{ ws* ~ (source_file_statement ~ ws*)+ }

//`translate(x = 5.0mm) { rectangle(width = 5.0mm); } translate(x = 5.0mm) { rotate(angle = 90°) { rectangle(width = 5.0); } }`: ok
//`module foo { init(size: length) { rectangle(size); } }`: ok # Module with init function
source_file = { SOI ~ ws* ~ source_file_inner? ~ ws* ~ EOI }
