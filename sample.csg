        use * from std.math;
        use * from std.geo2d;
        use { polygon } from std.polygon;
        use std.polygon;
        
        r = 5mm;
        angle = 90째;
        my_vec3 = (5mm, 5mm, 5mm);
        my_vec3 = (5, 5, 5)mm;
        my_vec3 = (5, 5mm, 5)cm;

        mod mesh {
        
            t: mat4;

            fn translate(self, v: (scalar, scalar, scalar)) -> self { self.t.translate(v); &self }
            fn rotate(self, r: (angle, angle, angle)) -> self { self.t.rotate(r); &self }
        
        }

        mod path {
            t: mat3;
            p: [point2];
        }

        mod linear_extrude: [polygon, path] -> mesh {
            (h: )

        }

        module circle {
            init(r: length) { r }
            init(d: length) { r = 0.5 * d }
            init(p0: point2, p1: point2, p2: point2) { ...  } // Construct
            init(p: [point2]) { }

            r: length;
            
            fn diameter(self) -> length { 0.5 * self.r }
        }
        
        translate(x = 5.0mm) {
            rectangle(w = 5.0mm, h = 5.0mm) {

            }
        }



        module translate {
            init(x: length = 0, y: length = 0, z: length = 0) {
                v: (x, y, z)
            }
            init(v: vec3) {
                v
            }
            v: vec3;
            _v: vec3 = (0,0,0);
            _foo: color = #00FF00;
 
            pub fn _member_function(self, v: length) -> length {


            }

            pub fn static_function(self) -> length {

            }

            pub angle := translate(0,0,0) {

            }

            CONSTANT: length = 100.0mm;
            pub CONSTANT: length = 100.0mm;

            
        }

        for xx in mm: node { }
        for [idx] in mm: translate { }

        if condition: node { }

        circle(r = 5mm).translate()

        translate(x = 5mm) {
            circle(d = 2.5mm);
            circle(d = 2.5mm);
        }

        circles = [circle(r = 25mm), circle(r = 5mm)].translate(x = 5mm);
        
        circles.rotated(30째)

trait Screw {

}

module Thing: Mesh + Screw {
    r: length = 5mm;
    r = 5mm;
    angle = 90째;
    my_vec3 = (5mm, 5mm, 5mm); // Type: (length, length, length)
    my_vec3 = (5, 5, 5)mm; // Type: (length, length, length)
    my_vec3 = (5, 5mm, 5)cm; // Type: (length, length, length)


    

    Difference {
        r = 100mm;

        Sphere(r = self.r) - Cylinder(r = 10mm, h = 62mm) - Cylinder(r = 20mm, h = 62.5mm).rotate(90째)

    }




}