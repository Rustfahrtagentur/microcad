-- Test --
  init_property
  ../doc/structure/workbench.md:126

-- Code --

 1: sketch Wheel(radius: Length, thickness: Length) {
 2:     // initializer with diameter
 3:     init( diameter: Length, thickness: Length ) {
 4:         // must set `radius` in code 
 5:         radius = diameter / 2;
 6: 
 7:         // thickness (from the building plan) does not need 
 8:         // to be set, because it was automatically set by 
 9:         // parameter of this initializer
10:     }
11: 
12:     // Now radius and thickness can be used
13:     std::geo2d::Circle(radius) - std::geo2d::Circle(radius - thickness);
14: }
15: 
16: // call with building plan
17: Wheel(radius=5cm, thickness=1cm);
18: // call with initializer
19: Wheel(diameter=10cm, thickness=1cm);

-- Output --
-- Errors --
-- Model --
  Group -> 2D (root)
    sketch <NO ID>::Wheel(radius: Length = 50mm, thickness: Length = 10mm) -> 2D
      Operation subtract()⏎ -> 2D
        Group -> 2D
          sketch std::geo2d::Circle(center: (x: Length, y: Length) = (x: Length = 0mm, y: Length = 0mm), radius: Length = 50mm) -> 2D
            Primitive2D __builtin::geo2d::Circle(cx: Scalar = 0, cy: Scalar = 0, radius: Scalar = 50)⏎ -> 2D
          sketch std::geo2d::Circle(center: (x: Length, y: Length) = (x: Length = 0mm, y: Length = 0mm), radius: Length = 40mm) -> 2D
            Primitive2D __builtin::geo2d::Circle(cx: Scalar = 0, cy: Scalar = 0, radius: Scalar = 40)⏎ -> 2D
    sketch <NO ID>::Wheel(diameter: Length = 100mm, thickness: Length = 10mm) -> 2D
      Operation subtract()⏎ -> 2D
        Group -> 2D
          sketch std::geo2d::Circle(center: (x: Length, y: Length) = (x: Length = 0mm, y: Length = 0mm), radius: Length = 50mm) -> 2D
            Primitive2D __builtin::geo2d::Circle(cx: Scalar = 0, cy: Scalar = 0, radius: Scalar = 50)⏎ -> 2D
          sketch std::geo2d::Circle(center: (x: Length, y: Length) = (x: Length = 0mm, y: Length = 0mm), radius: Length = 40mm) -> 2D
            Primitive2D __builtin::geo2d::Circle(cx: Scalar = 0, cy: Scalar = 0, radius: Scalar = 40)⏎ -> 2D

-- Test Result --
OK
Export successful.
