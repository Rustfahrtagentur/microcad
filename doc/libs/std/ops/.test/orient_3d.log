-- Test --
  orient_3d
  ../doc/libs/std/ops/orient.md:7

-- Code --

 1: use std::math::*;
 2: use std::ops::*;
 3: use std::geo3d::*;
 4: 
 5: Cylinder(h = 50mm, d = 35mm).orient([X,Y,Z]);

-- Output --
-- Errors --
-- Model --
  Group -> 3D (root)
    op std::ops::orient(v: Vec2 = (x: Scalar = 1, y: Scalar = 0, z: Scalar = 0)) -> 3D
      Transform __builtin::ops::orient(x: Scalar = 1, y: Scalar = 0, z: Scalar = 0)⏎ -> 3D
        part std::geo3d::Cylinder(d: Length = 35mm, h: Length = 50mm) -> 3D
          Transform __builtin::ops::translate(x: Scalar = 0, y: Scalar = 0, z: Scalar = -25)⏎ -> 3D
            Primitive3D __builtin::geo3d::Cylinder(height: Scalar = 50, radius_bottom: Scalar = 17.5, radius_top: Scalar = 17.5)⏎ -> 3D
    op std::ops::orient(v: Vec2 = (x: Scalar = 0, y: Scalar = 1, z: Scalar = 0)) -> 3D
      Transform __builtin::ops::orient(x: Scalar = 0, y: Scalar = 1, z: Scalar = 0)⏎ -> 3D
        part std::geo3d::Cylinder(d: Length = 35mm, h: Length = 50mm) -> 3D
          Transform __builtin::ops::translate(x: Scalar = 0, y: Scalar = 0, z: Scalar = -25)⏎ -> 3D
            Primitive3D __builtin::geo3d::Cylinder(height: Scalar = 50, radius_bottom: Scalar = 17.5, radius_top: Scalar = 17.5)⏎ -> 3D
    op std::ops::orient(v: Vec2 = (x: Scalar = 0, y: Scalar = 0, z: Scalar = 1)) -> 3D
      Transform __builtin::ops::orient(x: Scalar = 0, y: Scalar = 0, z: Scalar = 1)⏎ -> 3D
        part std::geo3d::Cylinder(d: Length = 35mm, h: Length = 50mm) -> 3D
          Transform __builtin::ops::translate(x: Scalar = 0, y: Scalar = 0, z: Scalar = -25)⏎ -> 3D
            Primitive3D __builtin::geo3d::Cylinder(height: Scalar = 50, radius_bottom: Scalar = 17.5, radius_top: Scalar = 17.5)⏎ -> 3D

-- Test Result --
OK
Export successful.
