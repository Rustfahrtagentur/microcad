-- Test --
  tutorial_part_geo3d
  ../doc/tutorial/tutorial.md:655

-- Code --

 1: use std::math::*;
 2: use std::ops::*;
 3: use std::geo3d::*;
 4: 
 5: size = 40mm;
 6: body = Sphere(r = size / 1.5) & Cube(size);
 7: holes = Cylinder(h = size, d = size / 1.5).orient([X,Y,Z]);
 8: body - holes;

-- Output --
-- Errors --
-- Model --
  Group -> 3D (root)
    Operation subtract()⏎ -> 3D
      Group -> 3D
        Operation intersect()⏎ -> 3D
          Group -> 3D
            part std::geo3d::Sphere(r: Length = 26.666666666666668mm) -> 3D
              Primitive3D __builtin::geo3d::Sphere(radius: Scalar = 26.666666666666668)⏎ -> 3D
            part std::geo3d::Cube(size: Length = 40mm) -> 3D
              Transform __builtin::ops::translate(x: Scalar = -20, y: Scalar = -20, z: Scalar = -20)⏎ -> 3D
                Primitive3D __builtin::geo3d::Cube(size_x: Scalar = 40, size_y: Scalar = 40, size_z: Scalar = 40)⏎ -> 3D
        Operation union()⏎ -> 3D
          Group -> 3D
            op std::ops::orient(v: Vec2 = (x: Scalar = 1, y: Scalar = 0, z: Scalar = 0)) -> 3D
              Transform __builtin::ops::orient(x: Scalar = 1, y: Scalar = 0, z: Scalar = 0)⏎ -> 3D
                part std::geo3d::Cylinder(d: Length = 26.666666666666668mm, h: Length = 40mm) -> 3D
                  Transform __builtin::ops::translate(x: Scalar = 0, y: Scalar = 0, z: Scalar = -20)⏎ -> 3D
                    Primitive3D __builtin::geo3d::Cylinder(height: Scalar = 40, radius_bottom: Scalar = 13.333333333333334, radius_top: Scalar = 13.333333333333…
            op std::ops::orient(v: Vec2 = (x: Scalar = 0, y: Scalar = 1, z: Scalar = 0)) -> 3D
              Transform __builtin::ops::orient(x: Scalar = 0, y: Scalar = 1, z: Scalar = 0)⏎ -> 3D
                part std::geo3d::Cylinder(d: Length = 26.666666666666668mm, h: Length = 40mm) -> 3D
                  Transform __builtin::ops::translate(x: Scalar = 0, y: Scalar = 0, z: Scalar = -20)⏎ -> 3D
                    Primitive3D __builtin::geo3d::Cylinder(height: Scalar = 40, radius_bottom: Scalar = 13.333333333333334, radius_top: Scalar = 13.333333333333…
            op std::ops::orient(v: Vec2 = (x: Scalar = 0, y: Scalar = 0, z: Scalar = 1)) -> 3D
              Transform __builtin::ops::orient(x: Scalar = 0, y: Scalar = 0, z: Scalar = 1)⏎ -> 3D
                part std::geo3d::Cylinder(d: Length = 26.666666666666668mm, h: Length = 40mm) -> 3D
                  Transform __builtin::ops::translate(x: Scalar = 0, y: Scalar = 0, z: Scalar = -20)⏎ -> 3D
                    Primitive3D __builtin::geo3d::Cylinder(height: Scalar = 40, radius_bottom: Scalar = 13.333333333333334, radius_top: Scalar = 13.333333333333…

-- Test Result --
OK
Export successful.
