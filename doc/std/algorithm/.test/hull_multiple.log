error: Symbol not found: hull
  ---> <no file>:1:1
     |
   1 | hull() {
     | ^^^^
     |
#0	root
error: Cannot nest item: Call(
    Call {
        name: QualifiedName(
            [
                Identifier(
                    Refer: SrcRef: 1:1: "hull",
                ),
            ],
        ),
        argument_list: CallArgumentList(
            Refer: <no ref>,
        ),
        src_ref: 1:1,
    },
)
  ---> <no file>:1:1
     |
   1 | hull() {
     | ^^^^^^^^
     |
#0	root
error: Symbol not found: union
  ---> <no file>:2:5
     |
   2 |     union() {
     |     ^^^^^
     |
#0	root
error: Cannot nest item: Call(
    Call {
        name: QualifiedName(
            [
                Identifier(
                    Refer: SrcRef: 2:5: "union",
                ),
            ],
        ),
        argument_list: CallArgumentList(
            Refer: <no ref>,
        ),
        src_ref: 2:5,
    },
)
  ---> <no file>:2:5
     |
   2 |     union() {
     |     ^^^^^^^^^^^^^
     |
#0	root
error: Symbol not found: translate
  ---> <no file>:3:9
     |
   3 |         translate(x = [-10, 10]mm, y = [-10, 10]mm)
     |         ^^^^^^^^^
     |
#0	root
error: Cannot nest item: Call(
    Call {
        name: QualifiedName(
            [
                Identifier(
                    Refer: SrcRef: 3:9: "translate",
                ),
            ],
        ),
        argument_list: CallArgumentList(
            Refer: SrcRef: 3:19: OrdMap { vec: [CallArgument { name: Some(Identifier(Refer: SrcRef: 3:19: "x")), value: ListExpression(ListExpression { list: ExpressionList([UnaryOp { op: "-", rhs: Literal(Integer(Refer: SrcRef: 3:25: 10)), src_ref: 3:24 }, Literal(Integer(Refer: SrcRef: 3:29: 10))]), unit: Some(Millimeter), src_ref: 3:23 }), src_ref: 3:19 }, CallArgument { name: Some(Identifier(Refer: SrcRef: 3:36: "y")), value: ListExpression(ListExpression { list: ExpressionList([UnaryOp { op: "-", rhs: Literal(Integer(Refer: SrcRef: 3:42: 10)), src_ref: 3:41 }, Literal(Integer(Refer: SrcRef: 3:46: 10))]), unit: Some(Millimeter), src_ref: 3:40 }), src_ref: 3:36 }] },
        ),
        src_ref: 3:9,
    },
)
  ---> <no file>:3:9
     |
   3 |         translate(x = [-10, 10]mm, y = [-10, 10]mm)
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
#0	root
error: Symbol not found: circle
  ---> <no file>:4:13
     |
   4 |             circle(1mm);
     |             ^^^^^^
     |
#0	root
error: Cannot nest item: Call(
    Call {
        name: QualifiedName(
            [
                Identifier(
                    Refer: SrcRef: 4:13: "circle",
                ),
            ],
        ),
        argument_list: CallArgumentList(
            Refer: SrcRef: 4:20: OrdMap { vec: [CallArgument { name: None, value: Literal(Number(NumberLiteral(1.0, Millimeter, 4:20))), src_ref: 4:20 }] },
        ),
        src_ref: 4:13,
    },
)
  ---> <no file>:3:9
     |
   3 |         translate(x = [-10, 10]mm, y = [-10, 10]mm)
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
#0	root
error: Symbol not found: translate
  ---> <no file>:5:9
     |
   5 |         translate(x = [-20, 20]mm, y = 0mm)
     |         ^^^^^^^^^
     |
#0	root
error: Cannot nest item: Call(
    Call {
        name: QualifiedName(
            [
                Identifier(
                    Refer: SrcRef: 5:9: "translate",
                ),
            ],
        ),
        argument_list: CallArgumentList(
            Refer: SrcRef: 5:19: OrdMap { vec: [CallArgument { name: Some(Identifier(Refer: SrcRef: 5:19: "x")), value: ListExpression(ListExpression { list: ExpressionList([UnaryOp { op: "-", rhs: Literal(Integer(Refer: SrcRef: 5:25: 20)), src_ref: 5:24 }, Literal(Integer(Refer: SrcRef: 5:29: 20))]), unit: Some(Millimeter), src_ref: 5:23 }), src_ref: 5:19 }, CallArgument { name: Some(Identifier(Refer: SrcRef: 5:36: "y")), value: Literal(Number(NumberLiteral(0.0, Millimeter, 5:40))), src_ref: 5:36 }] },
        ),
        src_ref: 5:9,
    },
)
  ---> <no file>:5:9
     |
   5 |         translate(x = [-20, 20]mm, y = 0mm)
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
#0	root
error: Symbol not found: circle
  ---> <no file>:6:13
     |
   6 |             circle(1mm);
     |             ^^^^^^
     |
#0	root
error: Cannot nest item: Call(
    Call {
        name: QualifiedName(
            [
                Identifier(
                    Refer: SrcRef: 6:13: "circle",
                ),
            ],
        ),
        argument_list: CallArgumentList(
            Refer: SrcRef: 6:20: OrdMap { vec: [CallArgument { name: None, value: Literal(Number(NumberLiteral(1.0, Millimeter, 6:20))), src_ref: 6:20 }] },
        ),
        src_ref: 6:13,
    },
)
  ---> <no file>:5:9
     |
   5 |         translate(x = [-20, 20]mm, y = 0mm)
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
#0	root
error: Symbol not found: hull
  ---> <no file>:1:1
     |
   1 | hull() {
     | ^^^^
     |
#0	root
error: Cannot nest item: Call(
    Call {
        name: QualifiedName(
            [
                Identifier(
                    Refer: SrcRef: 1:1: "hull",
                ),
            ],
        ),
        argument_list: CallArgumentList(
            Refer: <no ref>,
        ),
        src_ref: 1:1,
    },
)
  ---> <no file>:1:1
     |
   1 | hull() {
     | ^^^^^^^^
     |
#0	root
error: Symbol not found: union
  ---> <no file>:2:5
     |
   2 |     union() {
     |     ^^^^^
     |
#0	root
error: Cannot nest item: Call(
    Call {
        name: QualifiedName(
            [
                Identifier(
                    Refer: SrcRef: 2:5: "union",
                ),
            ],
        ),
        argument_list: CallArgumentList(
            Refer: <no ref>,
        ),
        src_ref: 2:5,
    },
)
  ---> <no file>:2:5
     |
   2 |     union() {
     |     ^^^^^^^^^^^^^
     |
#0	root
error: Symbol not found: translate
  ---> <no file>:3:9
     |
   3 |         translate(x = [-10, 10]mm, y = [-10, 10]mm)
     |         ^^^^^^^^^
     |
#0	root
error: Cannot nest item: Call(
    Call {
        name: QualifiedName(
            [
                Identifier(
                    Refer: SrcRef: 3:9: "translate",
                ),
            ],
        ),
        argument_list: CallArgumentList(
            Refer: SrcRef: 3:19: OrdMap { vec: [CallArgument { name: Some(Identifier(Refer: SrcRef: 3:19: "x")), value: ListExpression(ListExpression { list: ExpressionList([UnaryOp { op: "-", rhs: Literal(Integer(Refer: SrcRef: 3:25: 10)), src_ref: 3:24 }, Literal(Integer(Refer: SrcRef: 3:29: 10))]), unit: Some(Millimeter), src_ref: 3:23 }), src_ref: 3:19 }, CallArgument { name: Some(Identifier(Refer: SrcRef: 3:36: "y")), value: ListExpression(ListExpression { list: ExpressionList([UnaryOp { op: "-", rhs: Literal(Integer(Refer: SrcRef: 3:42: 10)), src_ref: 3:41 }, Literal(Integer(Refer: SrcRef: 3:46: 10))]), unit: Some(Millimeter), src_ref: 3:40 }), src_ref: 3:36 }] },
        ),
        src_ref: 3:9,
    },
)
  ---> <no file>:3:9
     |
   3 |         translate(x = [-10, 10]mm, y = [-10, 10]mm)
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
#0	root
error: Symbol not found: circle
  ---> <no file>:4:13
     |
   4 |             circle(1mm);
     |             ^^^^^^
     |
#0	root
error: Cannot nest item: Call(
    Call {
        name: QualifiedName(
            [
                Identifier(
                    Refer: SrcRef: 4:13: "circle",
                ),
            ],
        ),
        argument_list: CallArgumentList(
            Refer: SrcRef: 4:20: OrdMap { vec: [CallArgument { name: None, value: Literal(Number(NumberLiteral(1.0, Millimeter, 4:20))), src_ref: 4:20 }] },
        ),
        src_ref: 4:13,
    },
)
  ---> <no file>:3:9
     |
   3 |         translate(x = [-10, 10]mm, y = [-10, 10]mm)
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
#0	root
error: Symbol not found: translate
  ---> <no file>:5:9
     |
   5 |         translate(x = [-20, 20]mm, y = 0mm)
     |         ^^^^^^^^^
     |
#0	root
error: Cannot nest item: Call(
    Call {
        name: QualifiedName(
            [
                Identifier(
                    Refer: SrcRef: 5:9: "translate",
                ),
            ],
        ),
        argument_list: CallArgumentList(
            Refer: SrcRef: 5:19: OrdMap { vec: [CallArgument { name: Some(Identifier(Refer: SrcRef: 5:19: "x")), value: ListExpression(ListExpression { list: ExpressionList([UnaryOp { op: "-", rhs: Literal(Integer(Refer: SrcRef: 5:25: 20)), src_ref: 5:24 }, Literal(Integer(Refer: SrcRef: 5:29: 20))]), unit: Some(Millimeter), src_ref: 5:23 }), src_ref: 5:19 }, CallArgument { name: Some(Identifier(Refer: SrcRef: 5:36: "y")), value: Literal(Number(NumberLiteral(0.0, Millimeter, 5:40))), src_ref: 5:36 }] },
        ),
        src_ref: 5:9,
    },
)
  ---> <no file>:5:9
     |
   5 |         translate(x = [-20, 20]mm, y = 0mm)
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
#0	root
error: Symbol not found: circle
  ---> <no file>:6:13
     |
   6 |             circle(1mm);
     |             ^^^^^^
     |
#0	root
error: Cannot nest item: Call(
    Call {
        name: QualifiedName(
            [
                Identifier(
                    Refer: SrcRef: 6:13: "circle",
                ),
            ],
        ),
        argument_list: CallArgumentList(
            Refer: SrcRef: 6:20: OrdMap { vec: [CallArgument { name: None, value: Literal(Number(NumberLiteral(1.0, Millimeter, 6:20))), src_ref: 6:20 }] },
        ),
        src_ref: 6:13,
    },
)
  ---> <no file>:5:9
     |
   5 |         translate(x = [-20, 20]mm, y = 0mm)
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
#0	root
