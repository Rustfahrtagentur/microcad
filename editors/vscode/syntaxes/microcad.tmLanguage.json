{
    "scopeName": "source.microcad",
    "name": "microcad",
    "patterns": [
        {
            "match": "//.*",
            "name": "comment.line.microcad"
        },
        {
            "match": "\\b(pub|sketch|part|op|mod|use|fn|init|return|if|else|mat|__builtin)\\b",
            "name": "keyword.control.microcad"
        },
        {
            "match": "\\b(Integer|Scalar|String|Color|Length|Area|Volume|Angle|Weight|Density|Bool|Matrix[0-9])\\b",
            "name": "storage.type.microcad"
        },
        {
            "match": "\\b([a-z_][a-zA-Z0-9_]*)\\s*(?=\\()",
            "name": "entity.name.function.microcad"
        },
        {
            "match": "\\+|-|\\*|/| %|\\=|\\==|\\!=|\\<|\\>|\\<=|\\>=|\\||:",
            "name": "keyword.operator.microcad"
        },
        {
            "match": "\\b(([0-9]+(\\.[0-9]+)?)(%|m|cm|mm|µm|in|ft|yd|deg|°|grad|turn|rad|g|kg|lb|oz|m²|cm²|mm²|µm²|in²|ft²|yd²|m³|cm³|mm³|µm³|in³|ft³|yd³|ml|cl|l|µl)?|true|false)\\b",
            "name": "constant.numeric.microcad"
        },
        {
            "match": "([a-z_][a-z0-9_]*)(::)",
            "captures": {
                "1": {
                    "name": "entity.name.namespace.microcad"
                },
                "2": {
                    "name": "keyword.operator.namespace.microcad"
                }
            }
        },
        {
            "match": "\\b([a-z_][a-zA-Z0-9_]*)\\b",
            "name": "variable.other.microcad"
        },
        {
            "match": "\\b([A-Z_][A-Z0-9_]*)\\b",
            "name": "constant.other.caps.microcad"
        },
        {
            "match": "\"[^\"]*\"",
            "name": "string.quoted.single.microcad"
        },
        {
            "begin": "\\(",
            "end": "\\)",
            "name": "meta.brace.round.microcad",
            "patterns": [
                {
                    "include": "#code"
                }
            ]
        },
        {
            "begin": "\\{",
            "end": "\\}",
            "name": "meta.brace.curly.microcad",
            "patterns": [
                {
                    "include": "#code"
                }
            ]
        }
    ],
    "repository": {
        "code": {
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#keywords"
                },
                {
                    "include": "#functions"
                },
                {
                    "include": "#operators"
                },
                {
                    "include": "#numbers"
                },
                {
                    "include": "#namespaces"
                },
                {
                    "include": "#variables"
                },
                {
                    "include": "#types"
                },
                {
                    "include": "#strings"
                },
                {
                    "include": "#custom_types"
                }
            ]
        },
        "comments": {
            "match": "//.*",
            "name": "comment.line.microcad"
        },
        "keywords": {
            "match": "\\b(pub|sketch|part|op|mod|use|fn|init|return|if|else|mat|__builtin)\\b",
            "name": "keyword.control.microcad"
        },
        "functions": {
            "match": "\\b([a-z_][a-zA-Z0-9_]*)\\s*(?=\\()",
            "name": "entity.name.function.microcad"
        },
        "operators": {
            "match": "\\+|-|\\*|/| %|\\=|\\==|\\!=|\\<|\\>|\\<=|\\>=|\\&&|\\||:",
            "name": "keyword.operator.microcad"
        },
        "numbers": {
            "match": "\\b(([0-9]+(\\.[0-9]+)?)(%|m|cm|mm|µm|in|ft|yd|deg|°|grad|turn|rad|g|kg|lb|oz|m²|cm²|mm²|µm²|in²|ft²|yd²|m³|cm³|mm³|µm³|in³|ft³|yd³|ml|cl|l|µl)?)|true|false\\b",
            "name": "constant.numeric.microcad"
        },
        "namespaces": {
            "match": "([a-z_][a-z0-9_]*)(::)",
            "captures": {
                "1": {
                    "name": "entity.name.namespace.microcad"
                },
                "2": {
                    "name": "keyword.operator.namespace.microcad"
                }
            }
        },
        "variables": {
            "match": "\\b([a-z_][a-zA-Z0-9_]*)\\b",
            "name": "variable.other.microcad"
        },
        "types": {
            "match": "\\b(Integer|Scalar|String|Color|Length|Area|Volume|Angle|Weight|Density|Bool)\\b",
            "name": "storage.type.microcad"
        },
        "custom_types": {
            "match": "\\b([A-Z_][a-zA-Z0-9_]*)\\b",
            "name": "entity.name.type.microcad"
        },
        "strings": {
            "match": "\"[^\"]*\"",
            "name": "string.quoted.single.microcad"
        }
    }
}